name=AnnotationsOnSteroids
applicationService=Application service
projectService=Project service: {0}
jvm.inspections.expensive.api.usage.display.name=Expensive API Usage
jvm.inspections.expensive.type.used.in.signature.display.name=Expensive type is used in signature
jvm.inspections.expensive.api.usage.ignore.declared.inside.this.project=Ignore API declared in this project
jvm.inspections.expensive.api.usage.ignore.inside.imports=Ignore inside imports
jvm.inspections.expensive.api.usage.annotations.list=expensive API annotations
jvm.inspections.expensive.api.usage.overridden.method.is.marked.expensive.itself=Overridden method ''{0}'' is CPU intensive (marked with @{1})
jvm.inspections.expensive.api.usage.overridden.method.is.marked.expensive.itself.called_in_loops=Overridden method ''{0}'' is CPU intensive (marked with @{1}) because it's called in a loop
jvm.inspections.expensive.api.usage.overridden.method.is.marked.expensive.itself.called_in_lambda=Overridden method ''{0}'' may be CPU intensive (marked with @{1}) if the lambda function is called multiple times
jvm.inspections.expensive.api.usage.overridden.method.is.declared.in.expensive.api=Overridden method ''{0}'' is declared in expensive {1} ''{2}'' marked with @{3}
jvm.inspections.expensive.api.usage.api.is.marked.expensive.itself=''{0}'' is CPU intensive (marked with @{1})
jvm.inspections.expensive.api.usage.api.is.marked.expensive.itself.called_in_loops=''{0}'' is CPU intensive (marked with @{1}) because it's called in a loop
jvm.inspections.expensive.api.usage.api.is.marked.expensive.itself.called_in_lambda=''{0}'' may be CPU intensive (marked with @{1}) if the lambda function is called multiple times
jvm.inspections.expensive.api.usage.api.is.declared.in.expensive.api=''{0}'' is declared in expensive {1} ''{2}'' marked with @{3}
jvm.inspections.expensive.api.usage.expensive.type.is.used.in.signature.of.referenced.api=''{0}'' is expensive because its signature references expensive {1} ''{2}'' marked with @{3}
jvm.inspections.expensive.type.used.in.method.signature.description=Method must be marked with ''@{0}'' annotation because its signature references expensive type ''{1}''
jvm.inspections.expensive.type.used.in.field.signature.description=Field must be marked with ''@{0}'' annotation because its type references expensive type ''{1}''
jvm.inspections.expensive.type.used.in.class.signature.description=Class must be marked with ''@{0}'' annotation because its declaration references expensive type ''{1}''